diff --git a/claripy/frontend_mixins/model_cache_mixin.py b/claripy/frontend_mixins/model_cache_mixin.py
index 0e08fc6..d759c00 100644
--- a/claripy/frontend_mixins/model_cache_mixin.py
+++ b/claripy/frontend_mixins/model_cache_mixin.py
@@ -76,33 +76,33 @@ class ModelCacheMixin:
         super(ModelCacheMixin, self).__init__(*args, **kwargs)
         self._models = set()
         self._exhausted = False
-        self._eval_exhausted = weakref.WeakSet()
-        self._max_exhausted = weakref.WeakSet()
-        self._min_exhausted = weakref.WeakSet()
+        self._eval_exhausted = weakref.WeakKeyDictionary()
+        self._max_exhausted = weakref.WeakKeyDictionary()
+        self._min_exhausted = weakref.WeakKeyDictionary()

     def _blank_copy(self, c):
         super(ModelCacheMixin, self)._blank_copy(c)
         c._models = set()
         c._exhausted = False
-        c._eval_exhausted = weakref.WeakSet()
-        c._max_exhausted = weakref.WeakSet()
-        c._min_exhausted = weakref.WeakSet()
+        c._eval_exhausted = weakref.WeakKeyDictionary()
+        c._max_exhausted = weakref.WeakKeyDictionary()
+        c._min_exhausted = weakref.WeakKeyDictionary()

     def _copy(self, c):
         super(ModelCacheMixin, self)._copy(c)
         c._models = set(self._models)
         c._exhausted = self._exhausted
-        c._eval_exhausted = weakref.WeakSet(self._eval_exhausted)
-        c._max_exhausted = weakref.WeakSet(self._max_exhausted)
-        c._min_exhausted = weakref.WeakSet(self._min_exhausted)
+        c._eval_exhausted = weakref.WeakKeyDictionary(self._eval_exhausted)
+        c._max_exhausted = weakref.WeakKeyDictionary(self._max_exhausted)
+        c._min_exhausted = weakref.WeakKeyDictionary(self._min_exhausted)

     def __setstate__(self, base_state):
         super().__setstate__(base_state)
         self._models = set()
         self._exhausted = False
-        self._eval_exhausted = weakref.WeakSet()
-        self._max_exhausted = weakref.WeakSet()
-        self._min_exhausted = weakref.WeakSet()
+        self._eval_exhausted = weakref.WeakKeyDictionary()
+        self._max_exhausted = weakref.WeakKeyDictionary()
+        self._min_exhausted = weakref.WeakKeyDictionary()

     #
     # Model cleaning
@@ -235,9 +235,12 @@ class ModelCacheMixin(object):
         return super(ModelCacheMixin, self).satisfiable(extra_constraints=extra_constraints, **kwargs)

     def batch_eval(self, asts, n, extra_constraints=(), **kwargs):
+        if len(extra_constraints) == 0 and len(asts) == 1 and asts[0].cache_key in self._eval_exhausted:
+            return self._eval_exhausted[asts[0].cache_key]
+
         results = self._get_batch_solutions(asts, n=n, extra_constraints=extra_constraints)

-        if len(results) == n or (len(asts) == 1 and asts[0].cache_key in self._eval_exhausted):
+        if len(results) == n:
             return results

         remaining = n - len(results)
@@ -259,7 +262,7 @@ class ModelCacheMixin(object):
                 raise

         if len(extra_constraints) == 0 and len(results) < n:
-            self._eval_exhausted.update(e.cache_key for e in asts)
+            self._eval_exhausted.update({e.cache_key: results for e in asts})

         return results

@@ -267,27 +270,33 @@ class ModelCacheMixin(object):
         return tuple( r[0] for r in ModelCacheMixin.batch_eval(self, [e], n=n, **kwargs) )

     def min(self, e, extra_constraints=(), **kwargs):
-        cached = [ ]
-        if e.cache_key in self._eval_exhausted or e.cache_key in self._min_exhausted:
-            cached = self._get_solutions(e, extra_constraints=extra_constraints)
-
-        if len(cached) > 0:
+        cacheable = len(extra_constraints) == 0
+        if cacheable and e.cache_key in self._min_exhausted:
+            return self._min_exhausted[e.cache_key]
+
+        cached = self._get_solutions(e, extra_constraints=extra_constraints)
+        if len(cached) > 0 and self._eval_exhausted.get(e.cache_key, -1) == len(cached):
+            if cacheable:
+                self._min_exhausted[e.cache_key] = min(cached)
             return min(cached)
         else:
             m = super(ModelCacheMixin, self).min(e, extra_constraints=extra_constraints, **kwargs)
-            self._min_exhausted.add(e.cache_key)
+            if cacheable:
+                self._min_exhausted[e.cache_key] = m
             return m

     def max(self, e, extra_constraints=(), **kwargs):
-        cached = [ ]
-        if e.cache_key in self._eval_exhausted or e.cache_key in self._max_exhausted:
-            cached = self._get_solutions(e, extra_constraints=extra_constraints)
+        if e.cache_key in self._max_exhausted:
+            return self._max_exhausted[e.cache_key]
+
+        cached = self._get_solutions(e, extra_constraints=extra_constraints)

-        if len(cached) > 0:
+        if len(cached) > 0 and self._eval_exhausted.get(e.cache_key, -1) == len(cached):
+            self._max_exhausted[e.cache_key] = max(cached)
             return max(cached)
         else:
             m = super(ModelCacheMixin, self).max(e, extra_constraints=extra_constraints, **kwargs)
-            self._max_exhausted.add(e.cache_key)
+            self._max_exhausted[e.cache_key] = m
             return m

     def solution(self, e, v, extra_constraints=(), **kwargs):
diff --git a/tests/test_cache.py b/tests/test_cache.py
new file mode 100644
index 0000000..5e46a75
--- /dev/null
+++ b/tests/test_cache.py
@@ -0,0 +1,38 @@
+import sys
+
+import claripy
+import nose
+
+
+def test_exhausted():
+    a = claripy.BVS('a', 64)
+    s = claripy.SolverComposite()
+
+    for i in range(len(a) / 8):
+        tmp = a[8 * (i + 1) - 1:8 * i]
+        v1 = s.eval(tmp, 260)
+        v2 = s.eval(tmp, 260)
+        nose.tools.assert_equal(v1, v2)
+        nose.tools.assert_equal(len(v2), 256)
+
+        s.add(claripy.ULE(tmp, 250))
+        m1 = s.max(tmp)
+        m2 = s.max(tmp)
+        nose.tools.assert_equal(m1, m2)
+        nose.tools.assert_equal(m2, 250)
+
+        s.add(claripy.UGT(tmp, 5))
+        m1 = s.min(tmp)
+        m2 = s.min(tmp)
+        nose.tools.assert_equal(m1, m2)
+        nose.tools.assert_equal(m2, 6)
+
+
+if __name__ == '__main__':
+    if len(sys.argv) > 1:
+        globals()['test_' + sys.argv[1]]()
+
+    else:
+        for func_name, func in globals().items():
+            if func_name.startswith('test_') and hasattr(func, '__call__'):
+                func()
